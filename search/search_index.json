{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"bring \u00b6 Package manager for files and file-sets. Description \u00b6 Documentation still to be done. Downloads \u00b6 Binaries \u00b6 Linux Windows Mac OS X Development \u00b6 Requirements \u00b6 Python (version >=3.6) pip, virtualenv git make direnv (optional) Prepare development environment \u00b6 Notes: if using direnv , adjust the Python version in .envrc (should not be necessary) if not using direnv , you have to setup and activate your Python virtualenv yourself, manually, before running make init git clone https://gitlab.com/frkl/bring cd bring mv .envrc.disabled .envrc direnv allow # if using direnv, otherwise activate virtualenv make init make targets \u00b6 init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) binary : create binary for project (will install pyenv -- check scripts/build-binary for details) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages serve-docs : serve documentation pages (incl. auto-reload) clean : clean build directories For details (and other, minor targets), check the Makefile . Running tests \u00b6 > make test # or > make coverage Update project template \u00b6 This project uses cruft to apply updates to the base Python project template to this repository. Check out it's documentation for more information. cruft update # interactively approve changes, make changes if necessary git add * git commit -m \"chore: updated project from template\" Copyright & license \u00b6 Please check the LICENSE file in this repository (it's a short license!). Parity Public License 6.0.0 Copyright (c) 2020 frkl O\u00dc","title":"Home"},{"location":"#bring","text":"Package manager for files and file-sets.","title":"bring"},{"location":"#description","text":"Documentation still to be done.","title":"Description"},{"location":"#downloads","text":"","title":"Downloads"},{"location":"#binaries","text":"Linux Windows Mac OS X","title":"Binaries"},{"location":"#development","text":"","title":"Development"},{"location":"#requirements","text":"Python (version >=3.6) pip, virtualenv git make direnv (optional)","title":"Requirements"},{"location":"#prepare-development-environment","text":"Notes: if using direnv , adjust the Python version in .envrc (should not be necessary) if not using direnv , you have to setup and activate your Python virtualenv yourself, manually, before running make init git clone https://gitlab.com/frkl/bring cd bring mv .envrc.disabled .envrc direnv allow # if using direnv, otherwise activate virtualenv make init","title":"Prepare development environment"},{"location":"#make-targets","text":"init : init development project (install project & dev dependencies into virtualenv, as well as pre-commit git hook) binary : create binary for project (will install pyenv -- check scripts/build-binary for details) flake : run flake8 tests mypy : run mypy tests test : run unit tests docs : create static documentation pages serve-docs : serve documentation pages (incl. auto-reload) clean : clean build directories For details (and other, minor targets), check the Makefile .","title":"make targets"},{"location":"#running-tests","text":"> make test # or > make coverage","title":"Running tests"},{"location":"#update-project-template","text":"This project uses cruft to apply updates to the base Python project template to this repository. Check out it's documentation for more information. cruft update # interactively approve changes, make changes if necessary git add * git commit -m \"chore: updated project from template\"","title":"Update project template"},{"location":"#copyright-license","text":"Please check the LICENSE file in this repository (it's a short license!). Parity Public License 6.0.0 Copyright (c) 2020 frkl O\u00dc","title":"Copyright &amp; license"},{"location":"api-documentation/","text":"bring \u00b6 log \u00b6 Top-level package for bring. bring.bring \u00b6 Main module. Bring Objects \u00b6 class Bring ( SimpleTing ) get_pkg_map \u00b6 | async get_pkg_map ( * indexes ) -> Mapping [ str , Mapping [ str , PkgTing ]] Get all pkgs, per available (or requested) indexes. bring.frecklets \u00b6 bring.frecklets.template \u00b6 bring.frecklets.install_pkg \u00b6 bring.frecklets.install_assembly \u00b6 bring.config \u00b6 ConfigTing Objects \u00b6 class ConfigTing ( InheriTing , SimpleTing ) Represents a config profile. Config profiles can inherit from other profiles, overwriting one or several of the parent key/value pairs. bring.config.bring_config \u00b6 BringConfig Objects \u00b6 class BringConfig ( object ) Wrapper to manage and access the configuration of a Bring instance. bring.config.folder_config \u00b6 FolderConfigProfilesTing Objects \u00b6 class FolderConfigProfilesTing ( SimpleTing ) __init__ \u00b6 | __init__ ( name : str , meta : TingMeta , config_path : str , config_file_ext : str = \"config\" ) A class to hold a set of ConfigTings, and gives access to them and their config dicts. get_contexts \u00b6 | async get_contexts ( update : bool = False ) -> Mapping [ str , ConfigTing ] Get all available config profiles. get_config_dicts \u00b6 | async get_config_dicts ( update : bool = False ) -> Mapping [ str , Mapping [ str , Any ]] Retrun the values of all available config profiles. bring.doc \u00b6 bring.doc.index \u00b6 bring.doc.args \u00b6 bring.doc.pkg \u00b6 bring.defaults \u00b6 bring.pkg_types \u00b6 PkgType Objects \u00b6 class PkgType (, metaclass = ABCMeta ) Abstract base class which acts as an adapter to retrieve package information using the 'source' key in bring pkg metadata. get_resolver_config \u00b6 | @abstractmethod | get_resolver_config () -> Mapping [ str , Any ] Return generic configuration information about this resolver. Supported keys (so far): - metadata_max_age : age of metadata in seconds that is condsidered valid (set to 0 to always invalidate/re-load metadata, -1 to never invalidate) get_unique_source_id \u00b6 | @abstractmethod | get_unique_source_id ( source_details : Mapping [ str , Any ], bring_index : \"BringIndexTing\" ) -> str Return a calculated unique id for a package, derived from the indexes of the source details (and possibly the current index). This is used mainly for caching purposes. get_seed_data \u00b6 | async get_seed_data ( source_details : Mapping [ str , Any ], bring_index : \"BringIndexTing\" ) Overwrite to provide seed data for a pkg. This is mostly used for the 'bring-pkg' type, in order to retrieve parent metadata. Currently only 'info' and 'labels' keys are supported. check_pkg_metadata_valid \u00b6 | check_pkg_metadata_valid ( metadata : Optional [ Mapping [ str , Any ]], source_details : Mapping [ str , Any ], bring_index : \"BringIndexTing\" , config : Optional [ Mapping [ str , Any ]] = None ) -> bool Check whether the provided metadata dictionary can be considered valid, or whether it needs to be reloaded. Arguments : metadata : the metadata source_details : source details of the package freckops_bring_index : the current bring index config : the resolver config, containing the 'metadata_max_age' key get_metadata_timestamp \u00b6 | async get_metadata_timestamp ( source_details : Union [ str , Mapping [ str , Any ]], bring_index : \"BringIndexTing\" ) -> Optional [ arrow . Arrow ] Return the timestamp of the existing metadata for the package referenced by the provided details. Returns : the timestamp of the last metadata refresh, or 'None' if there is no metadata (yet) get_pkg_metadata \u00b6 | async get_pkg_metadata ( source_details : Union [ str , Mapping [ str , Any ]], bring_index : \"BringIndexTing\" , override_config : Optional [ Mapping [ str , Any ]] = None ) -> Mapping [ str , Any ] Return metadata of a bring package, specified via the provided source details and current index. Returns a dictionary with the following keys: versions : a list of dictionaries with the keys being package specific sets of variables that are combined to denominate one version item, as well as a '_meta' key containing arbitrary metadata aliases : TO BE DONE metadata_check : timestamp string (incl. timezone) describing the date of the metadata check args : a mapping describing the available args that are required/optional to point to a specific version of a pkg @param pkg_name: SimplePkgType Objects \u00b6 class SimplePkgType ( PkgType ) get_artefact_mogrify \u00b6 | get_artefact_mogrify ( source_details : Mapping [ str , Any ], version : Mapping [ str , Any ]) -> Optional [ Union [ Mapping , Iterable ]] Return the mogrify instructions for a specific version item. Returns : either a single mogrify instructions, or several process_vars \u00b6 | async process_vars ( source_args : Mapping [ str , Any ], pkg_args : Mapping [ str , Any ], mogrifiers : Union [ Iterable , Mapping ], source_vars : Mapping [ str , Any ], versions : List [ Mapping [ str , Any ]], aliases : Mapping [ str , Mapping [ str , str ]]) -> Mapping [ str , Any ] Return the (remaining) args a user can specify to select a version or mogrify options. Source args can contain more arguments than will eventually be used/displayed to the user. Arguments : source_args : dictionary of args to describe the type/schema of an argument pkg_args : a dictionary of automatically created args by a specific resolver. Those will be used as base, but will be overwritten by anything in 'source_args' mogrifiers : the 'mogrify' section of the pkg 'source' source_vars : vars that are hardcoded in the 'source' section of a package, can also contain templates versions : all avaailable versions of a package aliases : a dictionary of value aliases that can be used by the user instead of the 'real' ones. Aliases are per arg name. Returns : a dictionary with 3 keys: args, version_vars, mogrify_vars bring.pkg_types.folder \u00b6 Folder Objects \u00b6 class Folder ( SimplePkgType ) A package type to represent a local folder. This is mostly used in local development, documentation still to be done... bring.pkg_types.github_release \u00b6 GithubRelease Objects \u00b6 class GithubRelease ( SimplePkgType ) A package type that tracks GitHub release artefacts. To be able to get a list of all releases and their metadata, a package needs to specify the github user- and repo-names, as well as a regex to parse the release urls and compute the variables (version, architecture, os, etc.) involved to assemble a list of versions for a package. This is a barebones example for a source definition for the fd application: source : type : github-release user_name : sharkdp repo_name : fd url_regex : 'https://github.com/.*/releases/download/v(?P<version>.*)/.*-v(?P=version)-(?P<arch>[^-]*)-(?P<os>[^.]*)\\\\..*$' More than one such regular expressions can be provided (in which case the value for url_regex should be a list), all matches for all regexes will be added to the resulting list. Most of the regexes for different packages look fairly similar, but unfortunately Github release-urls don't follow a standard, which makes it impossible to come up with one that can be used for all of them. bring comes with a default regex that works for quite a few Github projects (and almost for a lot of others). In fact, the regex in the example above is the default regex that will be used if no ' url_regex ' value is provided, and it so happens that it works for ' fd ' (which means we could have omitted it for that particular application). Nonetheless, whoever creates a new package manifest needs to manually verify whether the default regex works, and then adjust or create a totally different one if necessary. examples: - binaries.k3d - kubernetes.cert-manager bring.pkg_types.template_url \u00b6 TemplateUrlResolver Objects \u00b6 class TemplateUrlResolver ( SimplePkgType ) A package type to resolve packages whose artifacts are published with static urls that can be templated. All values of all template variables are combined with each of the other template variables to create a matrix of possible combinations. In some cases some of those combinations are not valid, and lead to a url that does not resolve to a file to download. At this time, there is nothing that can be done about it and the user will see an error message. Examples : binaries.kubectl binaries.mitmproxy bring.pkg_types.bring_pkgs \u00b6 BringPkgsResolver Objects \u00b6 class BringPkgsResolver ( SimplePkgType ) A package type that allows to create a single package out of two or more other packages. Currently, there are not many use-cases for this, so you can ignore this type. There are some more advanced use-cases that will be documented in the future. The value for the 'pkgs' variable is a list of dictionaries, with a required ' name ' value, as well as optional ' index ', ' vars ', and ' mogrify ' keys. Here's an example that 'installs' two different kubernetes manifest folders into a subfolder each: source : type : bring-pkgs pkgs : - name : kubernetes.ingress-nginx mogrify : - type : move_to_subfolder subfolder : ingress-nginx - name : kubernetes.cert-manager vars : version : 0.13.0 mogrify : - type : move_to_subfolder subfolder : cert-manager get_seed_data \u00b6 | async get_seed_data ( source_details : Mapping [ str , Any ], bring_index : BringIndexTing ) -> Mapping [ str , Any ] Overwrite to provide seed data for a pkg. This is mostly used for the 'bring-pkg' type, in order to retrieve parent metadata. bring.pkg_types.bring_pkg \u00b6 BringPkgResolver Objects \u00b6 class BringPkgResolver ( SimplePkgType ) A package type that creates a package that inherits from another, lower-level package in the same or another index. Currently, there are not many use-cases for this, so you can ignore this type. There are some more advanced use-cases that will be documented in the future. If no 'index_name' property is specified, it is assumed the package to use lives in the same index. Otherwise, the index must be valid in the configuration profile that is currently used. get_seed_data \u00b6 | async get_seed_data ( source_details : Mapping [ str , Any ], bring_index : \"BringIndexTing\" ) Overwrite to provide seed data for a pkg. This is mostly used for the 'bring-pkg' type, in order to retrieve parent metadata. bring.pkg_types.git_repo \u00b6 GitRepo Objects \u00b6 class GitRepo ( SimplePkgType ) A package that represents a git repository (or contents thereof). By default, all tags and branches will be used as version names. If ' use_commits_as_versions ' is set to ' true ', also the commit hashes will be used. An alias ' latest ' will be added, pointing to the latest tag, or, in case no tags exist, to the 'master' branch. Examples : kubernetes.ingress-nginx bring._meta \u00b6 bring.utils \u00b6 find_version \u00b6 find_version ( vars : Mapping [ str , str ], metadata : Mapping [ str , Any ], var_aliases_replaced = False ) -> Optional [ Mapping [ str , Any ]] Return details about one version item of a package, using the provided vars to find one (or the first) version that matches most/all of the provided vars. Arguments : vars : User provided vars metadata : the package metadata bring.utils.pkgs \u00b6 bring.utils.paths \u00b6 bring.utils.defaults \u00b6 bring.utils.indexes \u00b6 bring.utils.args \u00b6 bring.utils.doc \u00b6 bring.utils.git \u00b6 bring.utils.gitlab \u00b6 bring.utils.github \u00b6 bring.utils.system_info \u00b6 bring.utils.pkg_spec \u00b6 bring.interfaces \u00b6 bring.interfaces.cli \u00b6 bring.interfaces.cli.dev \u00b6 dev \u00b6 @click . group () @click . pass_context dev ( ctx ) Helper tasks for development. details \u00b6 @dev . command () @click . argument ( \"pkg_name\" , nargs = 1 ) @click . pass_context async details ( ctx , pkg_name ) Clear the bring cache dir in the relevant locaiont (e.g. '~/.cache/bring' on Linux). bring.interfaces.cli.list_pkgs \u00b6 BringListPkgsGroup Objects \u00b6 class BringListPkgsGroup ( FrklBaseCommand ) format_commands \u00b6 | format_commands ( ctx , formatter ) Extra format methods for multi methods that adds all the commands after the options. bring.interfaces.cli.commands \u00b6 bring.interfaces.cli.commands.export_index \u00b6 bring.interfaces.cli.commands.install \u00b6 BringInstallGroup Objects \u00b6 class BringInstallGroup ( FrklBaseCommand ) __init__ \u00b6 | __init__ ( bring : Bring , name : str = None , ** kwargs ) Install format_commands \u00b6 | format_commands ( ctx , formatter ) Extra format methods for multi methods that adds all the commands after the options. bring.interfaces.cli.commands.explain \u00b6 bring.interfaces.cli.commands.update \u00b6 bring.interfaces.cli.utils \u00b6 create_pkg_list_for_help \u00b6 async create_pkg_list_for_help ( bring : Bring , indicate_optional_index : bool = True ) -> List [ Tuple [ str , str ]] Extra format methods for multi methods that adds all the commands after the options. bring.interfaces.cli.command_group \u00b6 bring.interfaces.cli.cli \u00b6 bring.interfaces.cli.differ \u00b6 dev \u00b6 @click . group () @click . pass_context dev ( ctx ) Helper tasks for development. differ \u00b6 @dev . command () @click . argument ( \"path\" , nargs = 1 ) @click . pass_context async differ ( ctx , path ) Clear the bring cache dir in the relevant locaiont (e.g. '~/.cache/bring' on Linux). bring.interfaces.cli.doc \u00b6 BringDocGroup Objects \u00b6 class BringDocGroup ( FrklBaseCommand ) __init__ \u00b6 | __init__ ( freckles : Freckles , name : str = \"doc\" , ** kwargs ) Install bring.interfaces.cli.config \u00b6 BringContextGroup Objects \u00b6 class BringContextGroup ( FrklBaseCommand ) __init__ \u00b6 | __init__ ( bring_config : BringConfig , name : str = None , ** kwargs ) Install BringContextCommands Objects \u00b6 class BringContextCommands ( FrklBaseCommand ) __init__ \u00b6 | __init__ ( bring_config : BringConfig , bring_context : ConfigTing , name : str = None , ** kwargs ) Install bring.interfaces.cli.process \u00b6 bring.interfaces.cli.plugin \u00b6 plugin \u00b6 @click . command () @click . pass_context @handle_exc_async async plugin ( ctx ) Clear the bring cache dir in the relevant locaiont (e.g. '~/.cache/bring' on Linux). bring.mogrify \u00b6 Mogrifier Objects \u00b6 class Mogrifier ( Task , SimpleTing ) The base class to extend to implement a 'Mogrifier'. A mogrifier is one part of a pipeline, usually taking an input folder, along other arguments, and providing an output folder path as result. Which in turn is used by the subsequent Mogrifier as input, etc. There are a few special cases, for example the 'download' mogrifier which takes a url as input and provides a path to a file (not folder) as output, or the 'extract' mogrifier which takes an (archive) file as input and provides a folder path as output. Currently there is not much checking whether Mogrifiers that are put together fit each others input/output arguments, but that will be implemented at some stage. So, for now, it's the users responsibility to assemble mogrifier pipelines that make sense. An implementation of a Mogrifier can either provide class-level attributes '_provides' and '_requires', or implement the 'provides()' and 'requires()' instance or class level methods. This method will be only read once per Ting prototype (TODO: reference), so make sure to not process any calculated values in there. Transmogritory Objects \u00b6 class Transmogritory ( SimpleTing ) Registry that holds all mogrify plugins. bring.mogrify.template \u00b6 bring.mogrify.git_clone \u00b6 bring.mogrify.helm_template \u00b6 bring.mogrify.flatten \u00b6 bring.mogrify.move_to_subfolder \u00b6 bring.mogrify.pick_subfolder \u00b6 bring.mogrify.merge_into \u00b6 bring.mogrify.extract \u00b6 ExtractMogrifier Objects \u00b6 class ExtractMogrifier ( SimpleMogrifier ) Extract an archive. This mogrifier is used internally, and, for now, can't be used in user-created mogrifier lists. Supported archive formats: - zip - tar - gztar - bztar - xztar bring.mogrify.install \u00b6 bring.mogrify.folder \u00b6 bring.mogrify.set_mode \u00b6 bring.mogrify.file \u00b6 FileMogrifier Objects \u00b6 class FileMogrifier ( SimpleMogrifier ) Alias for 'create_folder_from_file', check this mogrifiers documentation for details. bring.mogrify.rename \u00b6 bring.mogrify.dict_patch \u00b6 bring.mogrify.archive \u00b6 ArchiveMogrifier Objects \u00b6 class ArchiveMogrifier ( ExtractMogrifier ) Alias for 'extract', check that mogrifiers documentation for details. bring.mogrify.pkg_content \u00b6 PkgContentMogrifier Objects \u00b6 class PkgContentMogrifier ( SimpleMogrifier ) Merge multiple folders into a single one, using one of the available merge strategies. This mogrifier is used internally, and, for now, can't be used in user-created mogrifier lists. bring.mogrify.parallel_pkg_merge \u00b6 bring.mogrify.download \u00b6 bring.mogrify.file_filter \u00b6 FileFilterMogrifier Objects \u00b6 class FileFilterMogrifier ( SimpleMogrifier ) Filters files in a folder using glob patterns. Examples : binaries.hugo kubernetes.ingress-nginx bring.mogrify.merge_folders \u00b6 MergeFoldersMogrifier Objects \u00b6 class MergeFoldersMogrifier ( SimpleMogrifier ) Merge multiple folders into a single one, using one of the available merge strategies. This mogrifier is used internally, and, for now, can't be used in user-created mogrifier lists. bring.plugins \u00b6 bring.plugins.templating \u00b6 bring.plugins.templating.cli \u00b6 bring.plugins.templating.core \u00b6 bring.plugins.cli \u00b6 bring.pkg_index \u00b6 bring.pkg_index.factory \u00b6 bring.pkg_index.pkgs \u00b6 bring.pkg_index.utils \u00b6 diff_packages \u00b6 async diff_packages ( index_orig : BringIndexTing , index_new : BringIndexTing ) -> Mapping [ str , Any ] Diffs the packages of two indexes. This does not update any of the indexes, if that is the desired behaviour, do that beforehand. bring.pkg_index.static_index \u00b6 bring.pkg_index.gitservice_user_index \u00b6 bring.pkg_index.github_user_index \u00b6 bring.pkg_index.index \u00b6 BringIndexTing Objects \u00b6 class BringIndexTing ( InheriTing , SimpleTing ) update \u00b6 | async update ( in_background : bool = False ) -> None Updates pkg metadata. bring.pkg_index.folder_index \u00b6 bring.pkg_index.config \u00b6 bring.pkg_index.pkg \u00b6 PkgTing Objects \u00b6 class PkgTing ( SimpleTing ) get_metadata \u00b6 | @abstractmethod | async get_metadata ( config : Optional [ Mapping [ str , Any ]] = None , register_task : bool = False ) -> Mapping [ str , Any ] Return metadata associated with this package. find_version_data \u00b6 | async find_version_data ( vars : Optional [ Mapping [ str , Any ]] = None , metadata : Optional [ Mapping [ str , Any ]] = None ) -> Optional [ Mapping [ str , Any ]] Find a matching version item for the provided vars dictionary. Returns : A tuple consisting of the version that was found (or None), and the 'exploded' vars that were used get_version_folder \u00b6 | async get_version_folder ( input_vars : Mapping [ str , Any ] = None , target_folder : Optional [ str ] = None , no_cache : bool = False ) -> Mapping [ str , Any ] Retrieve the path to a (possibly cached) folder that represents the package with the specified variables. If you supply the 'target_folder' argument, a copy of the folder will be created at that location (which is not allowed to exist yet). If you do not, make sure you only do read operations on it; don't change any files in that folder, as that may corrupt results for subequent users of this cached folder. Returns : Mapping - a dict with 'path' and 'version_hash' keys DynamicPkgTing Objects \u00b6 class DynamicPkgTing ( PkgTing ) get_metadata \u00b6 | async get_metadata ( config : Optional [ Mapping [ str , Any ]] = None , register_task : bool = False ) -> Mapping [ str , Any ] Return metadata associated with this package. bring.pkg_index.gitlab_user_index \u00b6","title":"API Documentation"},{"location":"api-documentation/#bring","text":"","title":"bring"},{"location":"api-documentation/#log","text":"Top-level package for bring.","title":"log"},{"location":"api-documentation/#bringbring","text":"Main module.","title":"bring.bring"},{"location":"api-documentation/#bring-objects","text":"class Bring ( SimpleTing )","title":"Bring Objects"},{"location":"api-documentation/#get_pkg_map","text":"| async get_pkg_map ( * indexes ) -> Mapping [ str , Mapping [ str , PkgTing ]] Get all pkgs, per available (or requested) indexes.","title":"get_pkg_map"},{"location":"api-documentation/#bringfrecklets","text":"","title":"bring.frecklets"},{"location":"api-documentation/#bringfreckletstemplate","text":"","title":"bring.frecklets.template"},{"location":"api-documentation/#bringfreckletsinstall_pkg","text":"","title":"bring.frecklets.install_pkg"},{"location":"api-documentation/#bringfreckletsinstall_assembly","text":"","title":"bring.frecklets.install_assembly"},{"location":"api-documentation/#bringconfig","text":"","title":"bring.config"},{"location":"api-documentation/#configting-objects","text":"class ConfigTing ( InheriTing , SimpleTing ) Represents a config profile. Config profiles can inherit from other profiles, overwriting one or several of the parent key/value pairs.","title":"ConfigTing Objects"},{"location":"api-documentation/#bringconfigbring_config","text":"","title":"bring.config.bring_config"},{"location":"api-documentation/#bringconfig-objects","text":"class BringConfig ( object ) Wrapper to manage and access the configuration of a Bring instance.","title":"BringConfig Objects"},{"location":"api-documentation/#bringconfigfolder_config","text":"","title":"bring.config.folder_config"},{"location":"api-documentation/#folderconfigprofilesting-objects","text":"class FolderConfigProfilesTing ( SimpleTing )","title":"FolderConfigProfilesTing Objects"},{"location":"api-documentation/#__init__","text":"| __init__ ( name : str , meta : TingMeta , config_path : str , config_file_ext : str = \"config\" ) A class to hold a set of ConfigTings, and gives access to them and their config dicts.","title":"__init__"},{"location":"api-documentation/#get_contexts","text":"| async get_contexts ( update : bool = False ) -> Mapping [ str , ConfigTing ] Get all available config profiles.","title":"get_contexts"},{"location":"api-documentation/#get_config_dicts","text":"| async get_config_dicts ( update : bool = False ) -> Mapping [ str , Mapping [ str , Any ]] Retrun the values of all available config profiles.","title":"get_config_dicts"},{"location":"api-documentation/#bringdoc","text":"","title":"bring.doc"},{"location":"api-documentation/#bringdocindex","text":"","title":"bring.doc.index"},{"location":"api-documentation/#bringdocargs","text":"","title":"bring.doc.args"},{"location":"api-documentation/#bringdocpkg","text":"","title":"bring.doc.pkg"},{"location":"api-documentation/#bringdefaults","text":"","title":"bring.defaults"},{"location":"api-documentation/#bringpkg_types","text":"","title":"bring.pkg_types"},{"location":"api-documentation/#pkgtype-objects","text":"class PkgType (, metaclass = ABCMeta ) Abstract base class which acts as an adapter to retrieve package information using the 'source' key in bring pkg metadata.","title":"PkgType Objects"},{"location":"api-documentation/#get_resolver_config","text":"| @abstractmethod | get_resolver_config () -> Mapping [ str , Any ] Return generic configuration information about this resolver. Supported keys (so far): - metadata_max_age : age of metadata in seconds that is condsidered valid (set to 0 to always invalidate/re-load metadata, -1 to never invalidate)","title":"get_resolver_config"},{"location":"api-documentation/#get_unique_source_id","text":"| @abstractmethod | get_unique_source_id ( source_details : Mapping [ str , Any ], bring_index : \"BringIndexTing\" ) -> str Return a calculated unique id for a package, derived from the indexes of the source details (and possibly the current index). This is used mainly for caching purposes.","title":"get_unique_source_id"},{"location":"api-documentation/#get_seed_data","text":"| async get_seed_data ( source_details : Mapping [ str , Any ], bring_index : \"BringIndexTing\" ) Overwrite to provide seed data for a pkg. This is mostly used for the 'bring-pkg' type, in order to retrieve parent metadata. Currently only 'info' and 'labels' keys are supported.","title":"get_seed_data"},{"location":"api-documentation/#check_pkg_metadata_valid","text":"| check_pkg_metadata_valid ( metadata : Optional [ Mapping [ str , Any ]], source_details : Mapping [ str , Any ], bring_index : \"BringIndexTing\" , config : Optional [ Mapping [ str , Any ]] = None ) -> bool Check whether the provided metadata dictionary can be considered valid, or whether it needs to be reloaded. Arguments : metadata : the metadata source_details : source details of the package freckops_bring_index : the current bring index config : the resolver config, containing the 'metadata_max_age' key","title":"check_pkg_metadata_valid"},{"location":"api-documentation/#get_metadata_timestamp","text":"| async get_metadata_timestamp ( source_details : Union [ str , Mapping [ str , Any ]], bring_index : \"BringIndexTing\" ) -> Optional [ arrow . Arrow ] Return the timestamp of the existing metadata for the package referenced by the provided details. Returns : the timestamp of the last metadata refresh, or 'None' if there is no metadata (yet)","title":"get_metadata_timestamp"},{"location":"api-documentation/#get_pkg_metadata","text":"| async get_pkg_metadata ( source_details : Union [ str , Mapping [ str , Any ]], bring_index : \"BringIndexTing\" , override_config : Optional [ Mapping [ str , Any ]] = None ) -> Mapping [ str , Any ] Return metadata of a bring package, specified via the provided source details and current index. Returns a dictionary with the following keys: versions : a list of dictionaries with the keys being package specific sets of variables that are combined to denominate one version item, as well as a '_meta' key containing arbitrary metadata aliases : TO BE DONE metadata_check : timestamp string (incl. timezone) describing the date of the metadata check args : a mapping describing the available args that are required/optional to point to a specific version of a pkg @param pkg_name:","title":"get_pkg_metadata"},{"location":"api-documentation/#simplepkgtype-objects","text":"class SimplePkgType ( PkgType )","title":"SimplePkgType Objects"},{"location":"api-documentation/#get_artefact_mogrify","text":"| get_artefact_mogrify ( source_details : Mapping [ str , Any ], version : Mapping [ str , Any ]) -> Optional [ Union [ Mapping , Iterable ]] Return the mogrify instructions for a specific version item. Returns : either a single mogrify instructions, or several","title":"get_artefact_mogrify"},{"location":"api-documentation/#process_vars","text":"| async process_vars ( source_args : Mapping [ str , Any ], pkg_args : Mapping [ str , Any ], mogrifiers : Union [ Iterable , Mapping ], source_vars : Mapping [ str , Any ], versions : List [ Mapping [ str , Any ]], aliases : Mapping [ str , Mapping [ str , str ]]) -> Mapping [ str , Any ] Return the (remaining) args a user can specify to select a version or mogrify options. Source args can contain more arguments than will eventually be used/displayed to the user. Arguments : source_args : dictionary of args to describe the type/schema of an argument pkg_args : a dictionary of automatically created args by a specific resolver. Those will be used as base, but will be overwritten by anything in 'source_args' mogrifiers : the 'mogrify' section of the pkg 'source' source_vars : vars that are hardcoded in the 'source' section of a package, can also contain templates versions : all avaailable versions of a package aliases : a dictionary of value aliases that can be used by the user instead of the 'real' ones. Aliases are per arg name. Returns : a dictionary with 3 keys: args, version_vars, mogrify_vars","title":"process_vars"},{"location":"api-documentation/#bringpkg_typesfolder","text":"","title":"bring.pkg_types.folder"},{"location":"api-documentation/#folder-objects","text":"class Folder ( SimplePkgType ) A package type to represent a local folder. This is mostly used in local development, documentation still to be done...","title":"Folder Objects"},{"location":"api-documentation/#bringpkg_typesgithub_release","text":"","title":"bring.pkg_types.github_release"},{"location":"api-documentation/#githubrelease-objects","text":"class GithubRelease ( SimplePkgType ) A package type that tracks GitHub release artefacts. To be able to get a list of all releases and their metadata, a package needs to specify the github user- and repo-names, as well as a regex to parse the release urls and compute the variables (version, architecture, os, etc.) involved to assemble a list of versions for a package. This is a barebones example for a source definition for the fd application: source : type : github-release user_name : sharkdp repo_name : fd url_regex : 'https://github.com/.*/releases/download/v(?P<version>.*)/.*-v(?P=version)-(?P<arch>[^-]*)-(?P<os>[^.]*)\\\\..*$' More than one such regular expressions can be provided (in which case the value for url_regex should be a list), all matches for all regexes will be added to the resulting list. Most of the regexes for different packages look fairly similar, but unfortunately Github release-urls don't follow a standard, which makes it impossible to come up with one that can be used for all of them. bring comes with a default regex that works for quite a few Github projects (and almost for a lot of others). In fact, the regex in the example above is the default regex that will be used if no ' url_regex ' value is provided, and it so happens that it works for ' fd ' (which means we could have omitted it for that particular application). Nonetheless, whoever creates a new package manifest needs to manually verify whether the default regex works, and then adjust or create a totally different one if necessary. examples: - binaries.k3d - kubernetes.cert-manager","title":"GithubRelease Objects"},{"location":"api-documentation/#bringpkg_typestemplate_url","text":"","title":"bring.pkg_types.template_url"},{"location":"api-documentation/#templateurlresolver-objects","text":"class TemplateUrlResolver ( SimplePkgType ) A package type to resolve packages whose artifacts are published with static urls that can be templated. All values of all template variables are combined with each of the other template variables to create a matrix of possible combinations. In some cases some of those combinations are not valid, and lead to a url that does not resolve to a file to download. At this time, there is nothing that can be done about it and the user will see an error message. Examples : binaries.kubectl binaries.mitmproxy","title":"TemplateUrlResolver Objects"},{"location":"api-documentation/#bringpkg_typesbring_pkgs","text":"","title":"bring.pkg_types.bring_pkgs"},{"location":"api-documentation/#bringpkgsresolver-objects","text":"class BringPkgsResolver ( SimplePkgType ) A package type that allows to create a single package out of two or more other packages. Currently, there are not many use-cases for this, so you can ignore this type. There are some more advanced use-cases that will be documented in the future. The value for the 'pkgs' variable is a list of dictionaries, with a required ' name ' value, as well as optional ' index ', ' vars ', and ' mogrify ' keys. Here's an example that 'installs' two different kubernetes manifest folders into a subfolder each: source : type : bring-pkgs pkgs : - name : kubernetes.ingress-nginx mogrify : - type : move_to_subfolder subfolder : ingress-nginx - name : kubernetes.cert-manager vars : version : 0.13.0 mogrify : - type : move_to_subfolder subfolder : cert-manager","title":"BringPkgsResolver Objects"},{"location":"api-documentation/#get_seed_data_1","text":"| async get_seed_data ( source_details : Mapping [ str , Any ], bring_index : BringIndexTing ) -> Mapping [ str , Any ] Overwrite to provide seed data for a pkg. This is mostly used for the 'bring-pkg' type, in order to retrieve parent metadata.","title":"get_seed_data"},{"location":"api-documentation/#bringpkg_typesbring_pkg","text":"","title":"bring.pkg_types.bring_pkg"},{"location":"api-documentation/#bringpkgresolver-objects","text":"class BringPkgResolver ( SimplePkgType ) A package type that creates a package that inherits from another, lower-level package in the same or another index. Currently, there are not many use-cases for this, so you can ignore this type. There are some more advanced use-cases that will be documented in the future. If no 'index_name' property is specified, it is assumed the package to use lives in the same index. Otherwise, the index must be valid in the configuration profile that is currently used.","title":"BringPkgResolver Objects"},{"location":"api-documentation/#get_seed_data_2","text":"| async get_seed_data ( source_details : Mapping [ str , Any ], bring_index : \"BringIndexTing\" ) Overwrite to provide seed data for a pkg. This is mostly used for the 'bring-pkg' type, in order to retrieve parent metadata.","title":"get_seed_data"},{"location":"api-documentation/#bringpkg_typesgit_repo","text":"","title":"bring.pkg_types.git_repo"},{"location":"api-documentation/#gitrepo-objects","text":"class GitRepo ( SimplePkgType ) A package that represents a git repository (or contents thereof). By default, all tags and branches will be used as version names. If ' use_commits_as_versions ' is set to ' true ', also the commit hashes will be used. An alias ' latest ' will be added, pointing to the latest tag, or, in case no tags exist, to the 'master' branch. Examples : kubernetes.ingress-nginx","title":"GitRepo Objects"},{"location":"api-documentation/#bring_meta","text":"","title":"bring._meta"},{"location":"api-documentation/#bringutils","text":"","title":"bring.utils"},{"location":"api-documentation/#find_version","text":"find_version ( vars : Mapping [ str , str ], metadata : Mapping [ str , Any ], var_aliases_replaced = False ) -> Optional [ Mapping [ str , Any ]] Return details about one version item of a package, using the provided vars to find one (or the first) version that matches most/all of the provided vars. Arguments : vars : User provided vars metadata : the package metadata","title":"find_version"},{"location":"api-documentation/#bringutilspkgs","text":"","title":"bring.utils.pkgs"},{"location":"api-documentation/#bringutilspaths","text":"","title":"bring.utils.paths"},{"location":"api-documentation/#bringutilsdefaults","text":"","title":"bring.utils.defaults"},{"location":"api-documentation/#bringutilsindexes","text":"","title":"bring.utils.indexes"},{"location":"api-documentation/#bringutilsargs","text":"","title":"bring.utils.args"},{"location":"api-documentation/#bringutilsdoc","text":"","title":"bring.utils.doc"},{"location":"api-documentation/#bringutilsgit","text":"","title":"bring.utils.git"},{"location":"api-documentation/#bringutilsgitlab","text":"","title":"bring.utils.gitlab"},{"location":"api-documentation/#bringutilsgithub","text":"","title":"bring.utils.github"},{"location":"api-documentation/#bringutilssystem_info","text":"","title":"bring.utils.system_info"},{"location":"api-documentation/#bringutilspkg_spec","text":"","title":"bring.utils.pkg_spec"},{"location":"api-documentation/#bringinterfaces","text":"","title":"bring.interfaces"},{"location":"api-documentation/#bringinterfacescli","text":"","title":"bring.interfaces.cli"},{"location":"api-documentation/#bringinterfacesclidev","text":"","title":"bring.interfaces.cli.dev"},{"location":"api-documentation/#dev","text":"@click . group () @click . pass_context dev ( ctx ) Helper tasks for development.","title":"dev"},{"location":"api-documentation/#details","text":"@dev . command () @click . argument ( \"pkg_name\" , nargs = 1 ) @click . pass_context async details ( ctx , pkg_name ) Clear the bring cache dir in the relevant locaiont (e.g. '~/.cache/bring' on Linux).","title":"details"},{"location":"api-documentation/#bringinterfacesclilist_pkgs","text":"","title":"bring.interfaces.cli.list_pkgs"},{"location":"api-documentation/#bringlistpkgsgroup-objects","text":"class BringListPkgsGroup ( FrklBaseCommand )","title":"BringListPkgsGroup Objects"},{"location":"api-documentation/#format_commands","text":"| format_commands ( ctx , formatter ) Extra format methods for multi methods that adds all the commands after the options.","title":"format_commands"},{"location":"api-documentation/#bringinterfacesclicommands","text":"","title":"bring.interfaces.cli.commands"},{"location":"api-documentation/#bringinterfacesclicommandsexport_index","text":"","title":"bring.interfaces.cli.commands.export_index"},{"location":"api-documentation/#bringinterfacesclicommandsinstall","text":"","title":"bring.interfaces.cli.commands.install"},{"location":"api-documentation/#bringinstallgroup-objects","text":"class BringInstallGroup ( FrklBaseCommand )","title":"BringInstallGroup Objects"},{"location":"api-documentation/#__init___1","text":"| __init__ ( bring : Bring , name : str = None , ** kwargs ) Install","title":"__init__"},{"location":"api-documentation/#format_commands_1","text":"| format_commands ( ctx , formatter ) Extra format methods for multi methods that adds all the commands after the options.","title":"format_commands"},{"location":"api-documentation/#bringinterfacesclicommandsexplain","text":"","title":"bring.interfaces.cli.commands.explain"},{"location":"api-documentation/#bringinterfacesclicommandsupdate","text":"","title":"bring.interfaces.cli.commands.update"},{"location":"api-documentation/#bringinterfacescliutils","text":"","title":"bring.interfaces.cli.utils"},{"location":"api-documentation/#create_pkg_list_for_help","text":"async create_pkg_list_for_help ( bring : Bring , indicate_optional_index : bool = True ) -> List [ Tuple [ str , str ]] Extra format methods for multi methods that adds all the commands after the options.","title":"create_pkg_list_for_help"},{"location":"api-documentation/#bringinterfacesclicommand_group","text":"","title":"bring.interfaces.cli.command_group"},{"location":"api-documentation/#bringinterfacesclicli","text":"","title":"bring.interfaces.cli.cli"},{"location":"api-documentation/#bringinterfacesclidiffer","text":"","title":"bring.interfaces.cli.differ"},{"location":"api-documentation/#dev_1","text":"@click . group () @click . pass_context dev ( ctx ) Helper tasks for development.","title":"dev"},{"location":"api-documentation/#differ","text":"@dev . command () @click . argument ( \"path\" , nargs = 1 ) @click . pass_context async differ ( ctx , path ) Clear the bring cache dir in the relevant locaiont (e.g. '~/.cache/bring' on Linux).","title":"differ"},{"location":"api-documentation/#bringinterfacesclidoc","text":"","title":"bring.interfaces.cli.doc"},{"location":"api-documentation/#bringdocgroup-objects","text":"class BringDocGroup ( FrklBaseCommand )","title":"BringDocGroup Objects"},{"location":"api-documentation/#__init___2","text":"| __init__ ( freckles : Freckles , name : str = \"doc\" , ** kwargs ) Install","title":"__init__"},{"location":"api-documentation/#bringinterfacescliconfig","text":"","title":"bring.interfaces.cli.config"},{"location":"api-documentation/#bringcontextgroup-objects","text":"class BringContextGroup ( FrklBaseCommand )","title":"BringContextGroup Objects"},{"location":"api-documentation/#__init___3","text":"| __init__ ( bring_config : BringConfig , name : str = None , ** kwargs ) Install","title":"__init__"},{"location":"api-documentation/#bringcontextcommands-objects","text":"class BringContextCommands ( FrklBaseCommand )","title":"BringContextCommands Objects"},{"location":"api-documentation/#__init___4","text":"| __init__ ( bring_config : BringConfig , bring_context : ConfigTing , name : str = None , ** kwargs ) Install","title":"__init__"},{"location":"api-documentation/#bringinterfacescliprocess","text":"","title":"bring.interfaces.cli.process"},{"location":"api-documentation/#bringinterfacescliplugin","text":"","title":"bring.interfaces.cli.plugin"},{"location":"api-documentation/#plugin","text":"@click . command () @click . pass_context @handle_exc_async async plugin ( ctx ) Clear the bring cache dir in the relevant locaiont (e.g. '~/.cache/bring' on Linux).","title":"plugin"},{"location":"api-documentation/#bringmogrify","text":"","title":"bring.mogrify"},{"location":"api-documentation/#mogrifier-objects","text":"class Mogrifier ( Task , SimpleTing ) The base class to extend to implement a 'Mogrifier'. A mogrifier is one part of a pipeline, usually taking an input folder, along other arguments, and providing an output folder path as result. Which in turn is used by the subsequent Mogrifier as input, etc. There are a few special cases, for example the 'download' mogrifier which takes a url as input and provides a path to a file (not folder) as output, or the 'extract' mogrifier which takes an (archive) file as input and provides a folder path as output. Currently there is not much checking whether Mogrifiers that are put together fit each others input/output arguments, but that will be implemented at some stage. So, for now, it's the users responsibility to assemble mogrifier pipelines that make sense. An implementation of a Mogrifier can either provide class-level attributes '_provides' and '_requires', or implement the 'provides()' and 'requires()' instance or class level methods. This method will be only read once per Ting prototype (TODO: reference), so make sure to not process any calculated values in there.","title":"Mogrifier Objects"},{"location":"api-documentation/#transmogritory-objects","text":"class Transmogritory ( SimpleTing ) Registry that holds all mogrify plugins.","title":"Transmogritory Objects"},{"location":"api-documentation/#bringmogrifytemplate","text":"","title":"bring.mogrify.template"},{"location":"api-documentation/#bringmogrifygit_clone","text":"","title":"bring.mogrify.git_clone"},{"location":"api-documentation/#bringmogrifyhelm_template","text":"","title":"bring.mogrify.helm_template"},{"location":"api-documentation/#bringmogrifyflatten","text":"","title":"bring.mogrify.flatten"},{"location":"api-documentation/#bringmogrifymove_to_subfolder","text":"","title":"bring.mogrify.move_to_subfolder"},{"location":"api-documentation/#bringmogrifypick_subfolder","text":"","title":"bring.mogrify.pick_subfolder"},{"location":"api-documentation/#bringmogrifymerge_into","text":"","title":"bring.mogrify.merge_into"},{"location":"api-documentation/#bringmogrifyextract","text":"","title":"bring.mogrify.extract"},{"location":"api-documentation/#extractmogrifier-objects","text":"class ExtractMogrifier ( SimpleMogrifier ) Extract an archive. This mogrifier is used internally, and, for now, can't be used in user-created mogrifier lists. Supported archive formats: - zip - tar - gztar - bztar - xztar","title":"ExtractMogrifier Objects"},{"location":"api-documentation/#bringmogrifyinstall","text":"","title":"bring.mogrify.install"},{"location":"api-documentation/#bringmogrifyfolder","text":"","title":"bring.mogrify.folder"},{"location":"api-documentation/#bringmogrifyset_mode","text":"","title":"bring.mogrify.set_mode"},{"location":"api-documentation/#bringmogrifyfile","text":"","title":"bring.mogrify.file"},{"location":"api-documentation/#filemogrifier-objects","text":"class FileMogrifier ( SimpleMogrifier ) Alias for 'create_folder_from_file', check this mogrifiers documentation for details.","title":"FileMogrifier Objects"},{"location":"api-documentation/#bringmogrifyrename","text":"","title":"bring.mogrify.rename"},{"location":"api-documentation/#bringmogrifydict_patch","text":"","title":"bring.mogrify.dict_patch"},{"location":"api-documentation/#bringmogrifyarchive","text":"","title":"bring.mogrify.archive"},{"location":"api-documentation/#archivemogrifier-objects","text":"class ArchiveMogrifier ( ExtractMogrifier ) Alias for 'extract', check that mogrifiers documentation for details.","title":"ArchiveMogrifier Objects"},{"location":"api-documentation/#bringmogrifypkg_content","text":"","title":"bring.mogrify.pkg_content"},{"location":"api-documentation/#pkgcontentmogrifier-objects","text":"class PkgContentMogrifier ( SimpleMogrifier ) Merge multiple folders into a single one, using one of the available merge strategies. This mogrifier is used internally, and, for now, can't be used in user-created mogrifier lists.","title":"PkgContentMogrifier Objects"},{"location":"api-documentation/#bringmogrifyparallel_pkg_merge","text":"","title":"bring.mogrify.parallel_pkg_merge"},{"location":"api-documentation/#bringmogrifydownload","text":"","title":"bring.mogrify.download"},{"location":"api-documentation/#bringmogrifyfile_filter","text":"","title":"bring.mogrify.file_filter"},{"location":"api-documentation/#filefiltermogrifier-objects","text":"class FileFilterMogrifier ( SimpleMogrifier ) Filters files in a folder using glob patterns. Examples : binaries.hugo kubernetes.ingress-nginx","title":"FileFilterMogrifier Objects"},{"location":"api-documentation/#bringmogrifymerge_folders","text":"","title":"bring.mogrify.merge_folders"},{"location":"api-documentation/#mergefoldersmogrifier-objects","text":"class MergeFoldersMogrifier ( SimpleMogrifier ) Merge multiple folders into a single one, using one of the available merge strategies. This mogrifier is used internally, and, for now, can't be used in user-created mogrifier lists.","title":"MergeFoldersMogrifier Objects"},{"location":"api-documentation/#bringplugins","text":"","title":"bring.plugins"},{"location":"api-documentation/#bringpluginstemplating","text":"","title":"bring.plugins.templating"},{"location":"api-documentation/#bringpluginstemplatingcli","text":"","title":"bring.plugins.templating.cli"},{"location":"api-documentation/#bringpluginstemplatingcore","text":"","title":"bring.plugins.templating.core"},{"location":"api-documentation/#bringpluginscli","text":"","title":"bring.plugins.cli"},{"location":"api-documentation/#bringpkg_index","text":"","title":"bring.pkg_index"},{"location":"api-documentation/#bringpkg_indexfactory","text":"","title":"bring.pkg_index.factory"},{"location":"api-documentation/#bringpkg_indexpkgs","text":"","title":"bring.pkg_index.pkgs"},{"location":"api-documentation/#bringpkg_indexutils","text":"","title":"bring.pkg_index.utils"},{"location":"api-documentation/#diff_packages","text":"async diff_packages ( index_orig : BringIndexTing , index_new : BringIndexTing ) -> Mapping [ str , Any ] Diffs the packages of two indexes. This does not update any of the indexes, if that is the desired behaviour, do that beforehand.","title":"diff_packages"},{"location":"api-documentation/#bringpkg_indexstatic_index","text":"","title":"bring.pkg_index.static_index"},{"location":"api-documentation/#bringpkg_indexgitservice_user_index","text":"","title":"bring.pkg_index.gitservice_user_index"},{"location":"api-documentation/#bringpkg_indexgithub_user_index","text":"","title":"bring.pkg_index.github_user_index"},{"location":"api-documentation/#bringpkg_indexindex","text":"","title":"bring.pkg_index.index"},{"location":"api-documentation/#bringindexting-objects","text":"class BringIndexTing ( InheriTing , SimpleTing )","title":"BringIndexTing Objects"},{"location":"api-documentation/#update","text":"| async update ( in_background : bool = False ) -> None Updates pkg metadata.","title":"update"},{"location":"api-documentation/#bringpkg_indexfolder_index","text":"","title":"bring.pkg_index.folder_index"},{"location":"api-documentation/#bringpkg_indexconfig","text":"","title":"bring.pkg_index.config"},{"location":"api-documentation/#bringpkg_indexpkg","text":"","title":"bring.pkg_index.pkg"},{"location":"api-documentation/#pkgting-objects","text":"class PkgTing ( SimpleTing )","title":"PkgTing Objects"},{"location":"api-documentation/#get_metadata","text":"| @abstractmethod | async get_metadata ( config : Optional [ Mapping [ str , Any ]] = None , register_task : bool = False ) -> Mapping [ str , Any ] Return metadata associated with this package.","title":"get_metadata"},{"location":"api-documentation/#find_version_data","text":"| async find_version_data ( vars : Optional [ Mapping [ str , Any ]] = None , metadata : Optional [ Mapping [ str , Any ]] = None ) -> Optional [ Mapping [ str , Any ]] Find a matching version item for the provided vars dictionary. Returns : A tuple consisting of the version that was found (or None), and the 'exploded' vars that were used","title":"find_version_data"},{"location":"api-documentation/#get_version_folder","text":"| async get_version_folder ( input_vars : Mapping [ str , Any ] = None , target_folder : Optional [ str ] = None , no_cache : bool = False ) -> Mapping [ str , Any ] Retrieve the path to a (possibly cached) folder that represents the package with the specified variables. If you supply the 'target_folder' argument, a copy of the folder will be created at that location (which is not allowed to exist yet). If you do not, make sure you only do read operations on it; don't change any files in that folder, as that may corrupt results for subequent users of this cached folder. Returns : Mapping - a dict with 'path' and 'version_hash' keys","title":"get_version_folder"},{"location":"api-documentation/#dynamicpkgting-objects","text":"class DynamicPkgTing ( PkgTing )","title":"DynamicPkgTing Objects"},{"location":"api-documentation/#get_metadata_1","text":"| async get_metadata ( config : Optional [ Mapping [ str , Any ]] = None , register_task : bool = False ) -> Mapping [ str , Any ] Return metadata associated with this package.","title":"get_metadata"},{"location":"api-documentation/#bringpkg_indexgitlab_user_index","text":"","title":"bring.pkg_index.gitlab_user_index"},{"location":"install/","text":"Installation \u00b6 There are three ways to install bring on your machine. Via a manual binary download, an install script, or installation of the python package. Binaries \u00b6 To install bring , download the appropriate binary from one of the links below, and set the downloaded file to be executable ( chmod +x bring ): Linux Windows Mac OS X Install script \u00b6 Alternatively, use the 'curly' install script for bring : curl https://gitlab.com/frkl/bring/-/raw/develop/scripts/install/bring.sh | bash This will add a section to your shell init file to add the install location ( $HOME/.local/share/frkl/bin ) to your $PATH . You might need to source that file (or log out and re-log in to your session) in order to be able to use bring : source ~/.profile Python package \u00b6 The python package is currently not available on pypi , so you need to specify the --extra-url parameter for your pip command. If you chooose this install method, I assume you know how to install Python packages manually, which is why I only show you an example way of getting bring onto your machine: > python3 -m venv ~/.venvs/bring > source ~/.venvs/bring/bin/activate > pip install --extra-index-url https://pkgs.frkl.io/frkl/dev bring Looking in indexes: https://pypi.org/simple, https://pkgs.frkl.io/frkl/dev Collecting bring Downloading http://pkgs.frkl.io/frkl/dev/%2Bf/ee3/f57bd91a076f9/bring-0.1.dev24%2Bgd3c4447-py2.py3-none-any.whl (28 kB) ... ... ... Successfully installed aiokafka-0.6.0 aiopg-1.0.0 ... ... ... > bring --help Usage: bring [OPTIONS] COMMAND [ARGS]... ... ...","title":"Install"},{"location":"install/#installation","text":"There are three ways to install bring on your machine. Via a manual binary download, an install script, or installation of the python package.","title":"Installation"},{"location":"install/#binaries","text":"To install bring , download the appropriate binary from one of the links below, and set the downloaded file to be executable ( chmod +x bring ): Linux Windows Mac OS X","title":"Binaries"},{"location":"install/#install-script","text":"Alternatively, use the 'curly' install script for bring : curl https://gitlab.com/frkl/bring/-/raw/develop/scripts/install/bring.sh | bash This will add a section to your shell init file to add the install location ( $HOME/.local/share/frkl/bin ) to your $PATH . You might need to source that file (or log out and re-log in to your session) in order to be able to use bring : source ~/.profile","title":"Install script"},{"location":"install/#python-package","text":"The python package is currently not available on pypi , so you need to specify the --extra-url parameter for your pip command. If you chooose this install method, I assume you know how to install Python packages manually, which is why I only show you an example way of getting bring onto your machine: > python3 -m venv ~/.venvs/bring > source ~/.venvs/bring/bin/activate > pip install --extra-index-url https://pkgs.frkl.io/frkl/dev bring Looking in indexes: https://pypi.org/simple, https://pkgs.frkl.io/frkl/dev Collecting bring Downloading http://pkgs.frkl.io/frkl/dev/%2Bf/ee3/f57bd91a076f9/bring-0.1.dev24%2Bgd3c4447-py2.py3-none-any.whl (28 kB) ... ... ... Successfully installed aiokafka-0.6.0 aiopg-1.0.0 ... ... ... > bring --help Usage: bring [OPTIONS] COMMAND [ARGS]... ... ...","title":"Python package"},{"location":"usage/","text":"Usage \u00b6 Getting help \u00b6 To get information for the bring command, use the --help flag: > bring --help Usage: bring [OPTIONS] COMMAND [ARGS]... 'bring' is a package manager for files and file-sets. 'bring'-managed files that are part of so called 'indexes': collections of metadata items, each describing one specific file or file-set. Options: --verbosity LEVEL The log level: CRITICAL, ERROR, WARNING, INFO, DEBUG -o, --output TEXT which output plugins to use, defaults to 'terminal' -i, --index TEXT one or several profile index(s), overwrites indexes in configuration -c, --config TEXT configuration option(s) and/or profile name(s) -h, --help Show this message and exit. Commands: install install one or a list of packages explain display context, index, pkg, or target information list list packages for all registered indexes update update index metadata export-index export index folder metadata to file doc documentation for application components self utilites to manage/display info about this application","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#getting-help","text":"To get information for the bring command, use the --help flag: > bring --help Usage: bring [OPTIONS] COMMAND [ARGS]... 'bring' is a package manager for files and file-sets. 'bring'-managed files that are part of so called 'indexes': collections of metadata items, each describing one specific file or file-set. Options: --verbosity LEVEL The log level: CRITICAL, ERROR, WARNING, INFO, DEBUG -o, --output TEXT which output plugins to use, defaults to 'terminal' -i, --index TEXT one or several profile index(s), overwrites indexes in configuration -c, --config TEXT configuration option(s) and/or profile name(s) -h, --help Show this message and exit. Commands: install install one or a list of packages explain display context, index, pkg, or target information list list packages for all registered indexes update update index metadata export-index export index folder metadata to file doc documentation for application components self utilites to manage/display info about this application","title":"Getting help"}]}