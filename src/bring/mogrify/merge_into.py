# -*- coding: utf-8 -*-
import logging
from typing import Any, Mapping, Union

from bring.defaults import BRING_TEMP_FOLDER_MARKER
from bring.merge_strategy import FolderMerge, explode_merge_strategy
from bring.mogrify import CheckMogrifier


log = logging.getLogger("bring")


class MergeIntoMogrifier(CheckMogrifier):

    _plugin_name: str = "merge_into"

    _input_args: Mapping[str, Union[str, Mapping[str, Any]]] = {
        "target": "string?",
        "merge_strategy": {"type": "dict", "default": {"type": "default"}},
        # "target_path_autogenerated": {"type": "boolean", "default": False, "required": False},
    }
    _pipeline_args: Mapping = {"folder_path": "string"}
    _check_output: Mapping = {}
    _pipeline_output: Mapping[str, str] = {"folder_path": "string"}

    # async def check_status(self, **user_input: Any) -> bool:
    #
    #     target_path = self.user_input.get("target", None)
    #     if not target_path:
    #         return False
    #
    #     if not os.path.exists(target_path):
    #         return False
    #
    #     # bring_target = BringTarget(typistry=self._tingistry_obj.typistry, target=target_path)

    def get_msg(self) -> str:

        vals = self.user_input
        target = vals.get("target", "[dynamic]")
        strategy = explode_merge_strategy(
            vals.get("merge_strategy", None), default_move_method="move"
        )

        target_auto_gen = vals.get("target_path_autogenerated", False)

        if target_auto_gen:
            result = "merging everything into a temporary folder"
        else:
            result = f"merging everything into: {target} (strategy: {strategy['type']})"
        return result

    async def mogrify(self, *value_names: str, **requirements) -> Mapping[str, Any]:

        strategy = requirements.get("merge_strategy", None)
        strategy = explode_merge_strategy(strategy, default_move_method="move")

        source = requirements["folder_path"]
        if not source:
            raise Exception("Can't merge directories, no source folder provided.")

        target_path = requirements.get("target", None)
        if target_path is None or target_path == BRING_TEMP_FOLDER_MARKER:
            target_path = self.create_temp_dir("merge_into_")

        merge_obj = FolderMerge(
            typistry=self._tingistry_obj.typistry,
            target=target_path,
            merge_strategy=strategy,
        )

        await merge_obj.merge_folders(source)

        return {"folder_path": target_path}
